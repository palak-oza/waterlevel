# -*- coding: utf-8 -*-
"""model.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/190J0RhdZY47XAi5oCe5ioTDjWWxLTbNg
"""

import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import warnings
def get_predictions(input_hours):
    # Load data from Excel file
    df = pd.read_excel("backend/assets/output.xlsx")

    # Your data preprocessing and model training code here...
    df = df.dropna(subset=['DATE'])
    df['DATE'] = pd.to_datetime(df['DATE'])
    df['Year'] = df['DATE'].dt.year
    df['Day'] = df['DATE'].dt.month
    df['Month'] = df['DATE'].dt.day
    df['Hour'] = df['DATE'].dt.hour
    df['Minute'] = df['DATE'].dt.minute
    df['DayOfWeek'] = df['DATE'].dt.dayofweek  # Monday = 0, Sunday = 6
    df['IsWeekend'] = (df['DATE'].dt.weekday >= 5).astype(int)
    df.set_index('DATE', inplace=True)
    train_size = int(len(df) * 0.8)
    train, test = df[:train_size], df[train_size:]
    features = train[['Month', 'Day', 'Hour', 'Minute', 'DayOfWeek', 'IsWeekend']]

    # Fit ARIMA model
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore")
        model = ARIMA(endog=train['LITRE'], exog=features, order=(2, 1, 2))
        model_fit = model.fit()

    # Process input hours
    input_hours = [int(hour) for hour in input_hours.split() if hour.isdigit() and 0 <= int(hour) <= 24]

    predictions = []
    for hour in input_hours:
        # Filter the test set for the specific hour, accounting for wraparound
        test_hourly = test[(test['Hour'] == hour) | (test['Hour'] == (hour + 24))]

        # Check if there is data for the specified hour
        if not test_hourly.empty:
            # Prepare features for the specific hour (excluding 'Year')
            test_hourly_features = test_hourly[['Month', 'Day', 'Hour', 'Minute', 'DayOfWeek', 'IsWeekend']]

            # Make predictions for the specific hour using the trained ARIMA model
            predictions_hourly = model_fit.predict(start=test_hourly.index[0], end=test_hourly.index[-1], exog=test_hourly_features)

            # Get the last predicted value as the predicted water level
            predicted_value1 = predictions_hourly.sum()
            predictions.append((test_hourly.index, predicted_value1))

    return predictions

